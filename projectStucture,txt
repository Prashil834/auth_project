auth-project/
├── client/                    # React frontend (Vite)
│   ├── public/                # Static assets
│   │   └── vite.svg
│   ├── src/                   # Source code
│   │   ├── assets/            # Images or other assets
│   │   ├── components/        # Reusable components
│   │   │   ├── SignUp.jsx
│   │   │   ├── SignIn.jsx
│   │   │   └── Dashboard.jsx
│   │   ├── pages/             # Page components
│   │   │   ├── Home.jsx
│   │   │   └── ProtectedRoute.jsx
│   │   ├── App.jsx            # Main App component
│   │   ├── main.jsx           # Entry point
│   │   ├── index.css          # Global styles (Tailwind imports)
│   │   └── vite-env.d.ts      # Vite type definitions
│   ├── package.json           # Frontend dependencies
│   ├── vite.config.js         # Vite configuration
│   ├── tailwind.config.js     # Tailwind configuration
│   └── postcss.config.js      # PostCSS for Tailwind
├── server/                    # Node.js backend
│   ├── config/                # Configuration files
│   │   └── db.js              # MongoDB connection
│   ├── models/                # Mongoose schemas
│   │   └── User.js            # User schema
│   ├── routes/                # API routes
│   │   └── auth.js            # Auth routes (sign up, sign in, get users)
│   ├── middleware/            # Custom middleware
│   │   └── auth.js            # JWT verification
│   ├── .env                   # Environment variables
│   ├── server.js              # Main server file
│   └── package.json           # Backend dependencies
└── README.md                  # Project documentation




I’ll guide you through creating a basic authentication project using **React**, **Node.js**, **MongoDB**, **Express**, **JWT**, and **Tailwind CSS** in a **Vite** setup. Since you’re a beginner with basic knowledge, I’ll keep instructions clear, include a folder structure, provide step-by-step guidance, suggest topics to learn, and include necessary commands. The project will feature **Sign Up**, **Sign In**, and a **Dashboard** page displaying authenticated users’ names and passwords (note: displaying passwords is not a best practice in real applications, but we’ll include it for learning purposes). I won’t provide code but will explain what to write in each file and the order to follow.

---

### **Project Overview**
- **Frontend**: React with Vite, styled with Tailwind CSS, for Sign Up, Sign In, and Dashboard pages.
- **Backend**: Node.js with Express for API routes, MongoDB for storing user data, and JWT for authentication.
- **Functionality**:
  - Default page: Sign Up form (name, email, password).
  - Sign In form (email, password).
  - After authentication, redirect to a Dashboard showing all authenticated users’ names and passwords.
- **Tools**: Vite (faster React setup), MongoDB (NoSQL database), JWT (token-based auth), Tailwind CSS (styling).

---

### **Topics to Learn**
Since you know the basics, here are key concepts to understand for this project. Study these alongside building:
1. **React**:
   - Components and Props
   - State and Hooks (useState, useEffect, useNavigate)
   - React Router for navigation
   - Handling forms and events
2. **Node.js/Express**:
   - Creating REST APIs
   - Middleware (e.g., body-parser for parsing JSON)
   - Environment variables (.env)
3. **MongoDB**:
   - Connecting to MongoDB Atlas (cloud database)
   - Mongoose for schema and model creation
   - CRUD operations (create, read)
4. **JWT**:
   - Token generation and verification
   - Protecting routes with middleware
5. **Tailwind CSS**:
   - Utility-first CSS (e.g., flex, grid, colors)
   - Responsive design basics
6. **Vite**:
   - Setting up a React project
   - Environment variables in Vite
7. **General**:
   - HTTP methods (POST, GET)
   - Async/await for handling promises
   - LocalStorage for storing JWT tokens
   - CORS (Cross-Origin Resource Sharing)

If any topic feels unclear, pause and explore tutorials on platforms like MDN, freeCodeCamp, or YouTube for basics.

---

### **Folder Structure**
Here’s the folder structure for your project. You’ll have two main folders: `client` (React frontend) and `server` (Node.js backend).

```
auth-project/
├── client/                    # React frontend (Vite)
│   ├── public/                # Static assets
│   │   └── vite.svg
│   ├── src/                   # Source code
│   │   ├── assets/            # Images or other assets
│   │   ├── components/        # Reusable components
│   │   │   ├── SignUp.jsx
│   │   │   ├── SignIn.jsx
│   │   │   └── Dashboard.jsx
│   │   ├── pages/             # Page components
│   │   │   ├── Home.jsx
│   │   │   └── ProtectedRoute.jsx
│   │   ├── App.jsx            # Main App component
│   │   ├── main.jsx           # Entry point
│   │   ├── index.css          # Global styles (Tailwind imports)
│   │   └── vite-env.d.ts      # Vite type definitions
│   ├── package.json           # Frontend dependencies
│   ├── vite.config.js         # Vite configuration
│   ├── tailwind.config.js     # Tailwind configuration
│   └── postcss.config.js      # PostCSS for Tailwind
├── server/                    # Node.js backend
│   ├── config/                # Configuration files
│   │   └── db.js              # MongoDB connection
│   ├── models/                # Mongoose schemas
│   │   └── User.js            # User schema
│   ├── routes/                # API routes
│   │   └── auth.js            # Auth routes (sign up, sign in, get users)
│   ├── middleware/            # Custom middleware
│   │   └── auth.js            # JWT verification
│   ├── .env                   # Environment variables
│   ├── server.js              # Main server file
│   └── package.json           # Backend dependencies
└── README.md                  # Project documentation
```

---

### **Step-by-Step Instructions**
Follow these steps to build the project. I’ll specify which folder to work in, what to do in each file, and the order to avoid confusion. Commands are provided where needed.

#### **Step 1: Set Up the Project**
1. **Create the Project Folder**:
   - Create a folder named `auth-project`.
   - Open a terminal and navigate to it: `cd auth-project`.

2. **Initialize Git (Optional)**:
   - Run `git init` to track changes.
   - Create a `.gitignore` file in `auth-project/` with:
     ```
     node_modules/
     client/node_modules/
     server/node_modules/
     .env
     client/dist/
     ```

3. **Create Client and Server Folders**:
   - Run `mkdir client server` to create the two folders.

---

#### **Step 2: Set Up the Backend (Server)**
Work in the `server/` folder first to set up the API, as the frontend will depend on it.

1. **Initialize Node.js Project**:
   - Navigate to `server/`: `cd server`.
   - Run `npm init -y` to create `package.json`.

2. **Install Backend Dependencies**:
   - Install Express, Mongoose, JWT, and other packages:
     ```bash
     npm install express mongoose jsonwebtoken bcryptjs dotenv cors
     ```
   - Install `nodemon` as a dev dependency for auto-restarting the server:
     ```bash
     npm install --save-dev nodemon
     ```

3. **Update package.json**:
   - In `server/package.json`, add a start script:
     ```json
     "scripts": {
       "start": "nodemon server.js"
     }
     ```

4. **Create .env File**:
   - In `server/`, create `.env` and add:
     ```
     MONGO_URI=your_mongo_atlas_uri
     JWT_SECRET=your_secret_key
     PORT=5000
     ```
   - **Note**: Replace `your_mongo_atlas_uri` with your MongoDB Atlas connection string (set up in Step 5) and `your_secret_key` with a random string (e.g., “mysecret123”).

5. **Set Up MongoDB Atlas**:
   - Go to [MongoDB Atlas](https://www.mongodb.com/cloud/atlas), sign up, and create a free cluster.
   - Create a database user and note the credentials.
   - Get the connection string (e.g., `mongodb+srv://<username>:<password>@cluster0.mongodb.net/authdb?retryWrites=true&w=majority`).
   - Replace `<username>`, `<password>`, and update the database name to `authdb` in the connection string.
   - Add this string to `MONGO_URI` in `.env`.

6. **Create server.js**:
   - In `server/`, create `server.js`.
   - Set up an Express server:
     - Import `express`, `dotenv`, `cors`, and routes (you’ll create later).
     - Use `dotenv.config()` to load environment variables.
     - Set up middleware: `express.json()` and `cors()`.
     - Connect to MongoDB (import from `config/db.js`).
     - Create a basic route: `GET /` that returns “Server is running”.
     - Listen on the port from `.env` (e.g., 5000).

7. **Create MongoDB Connection (config/db.js)**:
   - In `server/config/`, create `db.js`.
   - Import `mongoose`.
   - Create an async function to connect to MongoDB using `mongoose.connect(process.env.MONGO_URI)`.
   - Handle connection errors and log success.
   - Export the function.

8. **Create User Model (models/User.js)**:
   - In `server/models/`, create `User.js`.
   - Import `mongoose`.
   - Define a schema with fields: `name` (string, required), `email` (string, required, unique), `password` (string, required).
   - Export the model using `mongoose.model('User', schema)`.

9. **Create Auth Routes (routes/auth.js)**:
   - In `server/routes/`, create `auth.js`.
   - Import `express`, `bcryptjs`, `jsonwebtoken`, and the User model.
   - Create three routes:
     - `POST /api/auth/signup`: Validate input, hash password with `bcryptjs`, save user to MongoDB, return success message.
     - `POST /api/auth/signin`: Validate input, check email, compare password with `bcryptjs`, generate JWT with `jsonwebtoken`, return token.
     - `GET /api/auth/users`: Protected route (use middleware), fetch all users’ names and passwords from MongoDB.
   - Export the router.

10. **Create JWT Middleware (middleware/auth.js)**:
    - In `server/middleware/`, create `auth.js`.
    - Import `jsonwebtoken`.
    - Create a middleware function:
      - Get token from `Authorization` header (format: “Bearer <token>”).
      - Verify token using `jsonwebtoken.verify` with `JWT_SECRET`.
      - Attach user ID to `req.user` if valid, else return 401 error.
    - Export the middleware.

11. **Test the Backend**:
    - Run `npm start` in `server/`.
    - Use a tool like Postman to test:
      - `POST http://localhost:5000/api/auth/signup` with JSON body `{ "name": "Test", "email": "test@example.com", "password": "password123" }`.
      - `POST http://localhost:5000/api/auth/signin` with `{ "email": "test@example.com", "password": "password123" }`.
      - `GET http://localhost:5000/api/auth/users` (add token in Authorization header).

---

#### **Step 3: Set Up the Frontend (Client)**
Now, set up the React frontend in the `client/` folder.

1. **Create Vite Project**:
   - Navigate to `client/`: `cd client`.
   - Run:
     ```bash
     npm create vite@latest . -- --template react
     ```
   - Choose “React” and “JavaScript” when prompted.
   - Install dependencies:
     ```bash
     npm install
     ```

2. **Install Frontend Dependencies**:
   - Install React Router, Axios (for API calls), and Tailwind:
     ```bash
     npm install react-router-dom axios
     ```

3. **Set Up Tailwind CSS**:
   - Install Tailwind and PostCSS:
     ```bash
     npm install -D tailwindcss postcss autoprefixer
     npx tailwindcss init -p
     ```
   - Update `tailwind.config.js`:
     - Add paths to your components and pages:
       ```js
       content: [
         "./index.html",
         "./src/**/*.{js,ts,jsx,tsx}",
       ]
       ```
   - In `src/index.css`, add Tailwind directives:
     ```css
     @tailwind base;
     @tailwind components;
     @tailwind utilities;
     ```

4. **Update package.json**:
   - Add a proxy to avoid CORS issues:
     ```json
     "proxy": "http://localhost:5000"
     ```

5. **Create .env File**:
   - In `client/`, create `.env`:
     ```
     VITE_API_URL=http://localhost:5000/api
     ```
   - Use `VITE_` prefix for Vite environment variables.

6. **Set Up React Router (main.jsx)**:
   - In `src/main.jsx`:
     - Import `BrowserRouter` from `react-router-dom`.
     - Wrap the `App` component in `BrowserRouter`.
     - Render the app using `ReactDOM.createRoot`.

7. **Create App.jsx**:
   - In `src/App.jsx`:
     - Import `Routes`, `Route`, and `Navigate` from `react-router-dom`.
     - Define routes:
       - `/`: Render `Home` component (default Sign Up).
       - `/signin`: Render `SignIn` component.
       - `/dashboard`: Render `Dashboard` component (protected).
     - Use `ProtectedRoute` to guard the dashboard.

8. **Create Home Page (pages/Home.jsx)**:
   - In `src/pages/`, create `Home.jsx`.
   - Render the `SignUp` component by default.
   - Add a link to navigate to `/signin`.

9. **Create SignUp Component (components/SignUp.jsx)**:
   - In `src/components/`, create `SignUp.jsx`.
   - Create a form with inputs for name, email, and password.
   - Use `useState` for form data.
   - On submit, send a POST request to `/api/auth/signup` using Axios.
   - Redirect to `/signin` on success.
   - Style with Tailwind (e.g., flex, padding, colors).

10. **Create SignIn Component (components/SignIn.jsx)**:
    - In `src/components/`, create `SignIn.jsx`.
    - Create a form with email and password inputs.
    - Use `useState` for form data.
    - On submit, send a POST request to `/api/auth/signin`.
    - Store the JWT token in `localStorage` and redirect to `/dashboard`.
    - Style with Tailwind.

11. **Create Dashboard Component (components/Dashboard.jsx)**:
    - In `src/components/`, create `Dashboard.jsx`.
    - Use `useEffect` to fetch users from `/api/auth/users` with Axios (include JWT in Authorization header).
    - Display a list of users’ names and passwords in a table or cards.
    - Add a logout button to clear `localStorage` and redirect to `/signin`.
    - Style with Tailwind (e.g., grid, table).

12. **Create ProtectedRoute (pages/ProtectedRoute.jsx)**:
    - In `src/pages/`, create `ProtectedRoute.jsx`.
    - Check if a JWT token exists in `localStorage`.
    - If token exists, render the child component (e.g., Dashboard); else, redirect to `/signin`.

13. **Test the Frontend**:
    - Run `npm run dev` in `client/`.
    - Open `http://localhost:5173` (or the port Vite uses).
    - Test Sign Up, Sign In, and Dashboard functionality.

---

#### **Step 4: Final Touches**
1. **Handle Errors**:
   - Add error handling in backend routes (e.g., email already exists, invalid credentials).
   - Display error messages in frontend forms using state.

2. **Style the App**:
   - Use Tailwind to make forms and the dashboard responsive.
   - Example: Center forms with `flex justify-center`, use `bg-gray-100` for backgrounds.

3. **Test End-to-End**:
   - Sign up a user, sign in, verify the dashboard shows all users, and test logout.

4. **Create README.md**:
   - In `auth-project/`, create `README.md`.
   - Document:
     - Project description
     - Setup instructions (install dependencies, set up `.env`)
     - How to run (`npm start` for server, `npm run dev` for client)
     - API endpoints (`/api/auth/signup`, etc.)


# Authentication Project

## Description
A basic authentication project using React, Node.js, Express, MongoDB, JWT, and Tailwind CSS. Features Sign Up, Sign In, and a Dashboard displaying authenticated users' names and passwords.

## Setup Instructions
1. **Clone the repository**:
   ```bash
   git clone <repository-url>
   cd auth-project
   ```

2. **Backend Setup** (in `server/`):
   - Install dependencies:
     ```bash
     npm install
     ```
   - Create `.env` with:
     ```
     MONGO_URI=your_mongo_atlas_uri
     JWT_SECRET=your_secret_key
     PORT=5000
     ```
   - Start the server:
     ```bash
     npm start
     ```

3. **Frontend Setup** (in `client/`):
   - Install dependencies:
     ```bash
     npm install
     ```
   - Create `.env` with:
     ```
     VITE_API_URL=http://localhost:5000/api
     ```
   - Start the frontend:
     ```bash
     npm run dev
     ```

## How to Run
- Backend: `npm start` in `server/`
- Frontend: `npm run dev` in `client/`
- Open `http://localhost:5173` in your browser.

## API Endpoints
- `POST /api/auth/signup`: Register a new user.
- `POST /api/auth/signin`: Log in and get JWT.
- `GET /api/auth/users`: Get all users (protected).



---

### **Tips for Beginners**
- **Debugging**: Use `console.log` in backend and frontend to check data flow.
- **Learn Gradually**: If stuck, revisit the “Topics to Learn” and focus on one concept at a time.
- **Security Note**: Storing passwords in plain text and displaying them is insecure. In a real app, hash passwords and never expose them.
- **Next Steps**: After completing, explore adding features like password reset or user profile editing.

---

This guide provides a clear path to build your project. Follow the steps in order, and you’ll have a working authentication app. If you need clarification on any step, let me know!